### Install Docker

# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

### Install kubectl

sudo snap install kubectl --classic

### Install ARGOCD CLI

brew install argocd

###Install K3D

curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | TAG=v5.0.0 bash

### Cluster init

k3d cluster create iot

### NAMESPACE CREATION

kubectl create namespace dev
kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

### Port forwarding

kubectl port-forward svc/argocd-server -n argocd 8080:443

### Default password argocd

argocd admin initial-password -n argocd
	OU
kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d

### Argocd config

argocd login localhost:8080
argocd account update-password (Salem2024)
argocd app create my-app --repo https://github.com/fbily42/iot-fbily.git --path my-app --dest-server https://kubernetes.default.svc --dest-namespace dev
argocd app get my-app
argocd app sync my-app

### Forwarding port for curl localhost:8888

kubectl port-forward service/wil42-service 8888:8888 -n dev